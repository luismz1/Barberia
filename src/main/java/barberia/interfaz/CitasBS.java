package barberia.interfaz;

// Paquetes utilizados
import barberia.control.Control;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

// CitasBS: Clase que se encarga de la ventana para el funcionamiento del menú de citas.
public class CitasBS extends javax.swing.JFrame {
    // Variables utilizadas
    private Control control;
    private ArrayList<ArrayList<String>> citasMat;
    
    /**
     * Creates new form CitaBS
     */
    
     // Constructor #1
    public CitasBS() {
        control = Control.getInstance();
        citasMat = control.verCitas();
        initComponents();
    }
    
     // Constructor #2
    public CitasBS(int tipoBusqueda, LocalDate fecha){
        control = Control.getInstance();
        citasMat = control.verCitasFiltradas(tipoBusqueda, fecha);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        String col[] = {"Identificador", "Cliente", "Servicio", "Fecha", "Hora", "Confirmada"};
        DefaultTableModel tableModel = new DefaultTableModel(col, 0){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        appointmentsTable = new javax.swing.JTable();
        modifyAppointmentButton = new javax.swing.JButton();
        addAppointmentButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        removeAppointmentButton = new javax.swing.JButton();
        confirmAppointmentButton = new javax.swing.JButton();
        filterAppointmentsButton = new javax.swing.JButton();
        resetTableButton = new javax.swing.JButton();
        sendMailsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menú Citas");
        setResizable(false);

        for (ArrayList<String> row : citasMat){
            Object[] rowData = {row.get(0), row.get(1), row.get(2), row.get(3), row.get(4), row.get(5)};
            tableModel.addRow(rowData);
        }
        appointmentsTable.setModel(tableModel);
        appointmentsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        appointmentsTable.setAutoscrolls(false);
        appointmentsTable.getTableHeader().setReorderingAllowed(false);
        appointmentsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        appointmentsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(appointmentsTable);

        modifyAppointmentButton.setText("Modificar Cita");
        modifyAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyAppointmentButtonActionPerformed(evt);
            }
        });

        addAppointmentButton.setText("Agregar Cita");
        addAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentButtonActionPerformed(evt);
            }
        });

        returnButton.setBackground(new java.awt.Color(32, 31, 31));
        returnButton.setForeground(new java.awt.Color(255, 255, 255));
        returnButton.setText("Regresar al Menú");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        removeAppointmentButton.setText("Eliminar Cita");
        removeAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAppointmentButtonActionPerformed(evt);
            }
        });

        confirmAppointmentButton.setText("Confirmar Cita");
        confirmAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmAppointmentButtonActionPerformed(evt);
            }
        });

        filterAppointmentsButton.setText("Filtrar Citas");
        filterAppointmentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterAppointmentsButtonActionPerformed(evt);
            }
        });

        resetTableButton.setText("Reiniciar Tabla");
        resetTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTableButtonActionPerformed(evt);
            }
        });

        sendMailsButton.setText("Enviar Correos");
        sendMailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMailsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filterAppointmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(resetTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(sendMailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(111, 111, 111)
                        .addComponent(returnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confirmAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modifyAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(addAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modifyAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(confirmAppointmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterAppointmentsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(resetTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sendMailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Método para agregar una cita mediante un botón.
    private void addAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentButtonActionPerformed
        // Si al intentar visualizar los clientes el Array List se encuentran vacío, se notifica al usuario que no 
        // hay clientes disponibles.
        if (control.verClientes().isEmpty()){
                JOptionPane.showMessageDialog(this, "No existen clientes disponibles para agendar citas.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);                  
        }
         // Si al intentar visualizar los servicios el Array List se encuentran vacío, se notifica al usuario que no
         // hay servicios disponibles.
        else if (control.verServicios().isEmpty()){
                JOptionPane.showMessageDialog(this, "No existen servicios disponibles para agendar citas.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);
        // En caso de haber clientes y servicios disponibles entonces se cierra la ventana actual y se abre la ventana 
        // para modificar las citas,
        }else{
                dispose();
                ModificarCita citaModify = new ModificarCita();
                citaModify.setVisible(true);
        }
    }//GEN-LAST:event_addAppointmentButtonActionPerformed
    
    // Método para modificar una cita mediante un botón.
    private void modifyAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyAppointmentButtonActionPerformed
        if (control.verClientes().isEmpty()){
                JOptionPane.showMessageDialog(this, "No existen clientes disponibles para agendar citas.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);                  
        }
         // Si al intentar visualizar los servicios el Array List se encuentran vacío, se notifica al usuario que no
         // hay servicios disponibles.
        else if (control.verServicios().isEmpty()){
                JOptionPane.showMessageDialog(this, "No existen servicios disponibles para agendar citas.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);
        }else{
            // Se intenta elegir una fila, de no ser así entonces se notifica al usuario que por favor seleccione una fila.
            try{
                 // Se obtiene el identificador de la fila seleccionada y la primera columna
                String id = (String) appointmentsTable.getValueAt(appointmentsTable.getSelectedRow(), 0);
                // Se obtiene el correo de la fila seleccionada y la segunda columna.
                String emailCita = (String) appointmentsTable.getValueAt(appointmentsTable.getSelectedRow(), 1);
                // Se obtiene el servicio de la fila seleccionada y la tercera columna.
                String descripcionCita = (String) appointmentsTable.getValueAt(appointmentsTable.getSelectedRow(), 2);
                // Se obtiene la fecha de la fila seleccionada y la cuarta columna.
                String fechaCita = (String) appointmentsTable.getValueAt(appointmentsTable.getSelectedRow(), 3);
                // Se obtiene la hora de la fila seleccionada y la quintena columna;
                String horaCita = (String) appointmentsTable.getValueAt(appointmentsTable.getSelectedRow(), 4);
                dispose();
                // Se crea un ventana de cita con todos los elementos inicializados con sus respectivos valores.
                ModificarCita citaModify = new ModificarCita(id, emailCita, descripcionCita, fechaCita, horaCita);
                citaModify.setVisible(true);
            }catch(ArrayIndexOutOfBoundsException ie){
                    JOptionPane.showMessageDialog(null, "Debe elegir una fila para modificar sus atributos.",
                            "Advertencia", JOptionPane.WARNING_MESSAGE);                 
            // Cualquiera otro error, será atrapado en este bloque de código.
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Ha ocurrido algún error, intente de nuevo más tarde. .",
                        "Advertencia", JOptionPane.ERROR_MESSAGE);
            }
         }
    }//GEN-LAST:event_modifyAppointmentButtonActionPerformed
    
    // Método para regresar al menú principal mediante un botón.
    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
       // Se pregunta al usuario si desea volver al menú principal
        int result = JOptionPane.showConfirmDialog(this, "¿Desea volver al menú principal?",
               "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
       // Si la respuesta es afirmativa entonces se cierra la ventana actual y se abre la ventana de menú principal.
        if (result == JOptionPane.YES_OPTION){
           dispose();
           Barberia barberia = new Barberia();
           barberia.setVisible(true);
       }
    }//GEN-LAST:event_returnButtonActionPerformed
    
    // Método para eliminar una cita mediante un botón.
    private void removeAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAppointmentButtonActionPerformed
        // Se intenta elegir una fila, de no ser así entonces se notifica al usuario que por favor seleccione una fila.
        try{
            // Se obtiene el identificador de la cita.
           String id = (String) appointmentsTable.getValueAt(appointmentsTable.getSelectedRow(), 0);
           // Se pregunta al usuario si desea eliminar la cita seleccionada.
            int result = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar la cita seleccionada?",
               "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            // Si la respuesta es afirmativa entonces se elimina la cita según el identificador recibido y se guardan los
            // datos en control para posteriormente reiniciar la ventana actual.
            if (result == JOptionPane.YES_OPTION){
                control.eliminarCita(Integer.parseInt(id));
                Control.guardarDatos(control);
                 JOptionPane.showMessageDialog(this, "Se ha eliminado la cita solicitada exitosamente.", 
                         "Notificación", JOptionPane.INFORMATION_MESSAGE);
                dispose();
                CitasBS citasMenu = new CitasBS();
                citasMenu.setVisible(true);
            } 
       }catch(ArrayIndexOutOfBoundsException ie){
                JOptionPane.showMessageDialog(this, "Debe elegir una fila para eliminar la cita.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);               
        // Cualquiera otro error, será atrapado en este bloque de código.
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Ha ocurrido algún error, intente de nuevo más tarde. .",
                    "Advertencia", JOptionPane.ERROR_MESSAGE);
        }          
    }//GEN-LAST:event_removeAppointmentButtonActionPerformed
    
    // Método para confirmar una cita mediante un botón.
    private void confirmAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmAppointmentButtonActionPerformed
        try{
            // Se obtiene el identificador de la cita.
           String id = (String) appointmentsTable.getValueAt(appointmentsTable.getSelectedRow(), 0);
           if (control.citaConfirmada(Integer.parseInt(id)) == true){
                JOptionPane.showMessageDialog(this, "La cita ya se encuentra confirmada, intente con otra.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);                          
           }else{
            // Se pregunta al usuario si desea confirmar la cita seleccionada.
             int result = JOptionPane.showConfirmDialog(this, "¿Está seguro de confirmar la cita seleccionada?",
                "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
             // Si la respuesta es afirmativa entonces se confirma la cita según el identificador recibido y se guardan los
             // datos en control para posteriormente reiniciar la ventana actual.
             if (result == JOptionPane.YES_OPTION){
                 control.confirmarCita(Integer.parseInt(id));
                 Control.guardarDatos(control);
                  JOptionPane.showMessageDialog(this, "Se ha confirmado la cita solicitada exitosamente.", 
                          "Notificación", JOptionPane.INFORMATION_MESSAGE);
                 dispose();
                 CitasBS citasMenu = new CitasBS();
                 citasMenu.setVisible(true);
             }
            }        
       }catch(ArrayIndexOutOfBoundsException ie){
                JOptionPane.showMessageDialog(this, "Debe elegir una fila para confirmar la cita.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);               
        // Cualquiera otro error, será atrapado en este bloque de código.
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Ha ocurrido algún error, intente de nuevo más tarde. .",
                    "Advertencia", JOptionPane.ERROR_MESSAGE);
        }          
    }//GEN-LAST:event_confirmAppointmentButtonActionPerformed
    
    // Método para filtrar las citas mediante un botón.
    private void filterAppointmentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterAppointmentsButtonActionPerformed
        // Si la tabla se encuentra vacía, entonces no se pueden filtrar citas.
        if (citasMat.isEmpty() == true)
                JOptionPane.showMessageDialog(this, "No existen citas disponibles por filtrar.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);    
        // En caso contrario, se abre una ventana de filtro de citas.
        else{
            FiltroCitas filtro = new FiltroCitas(this, this, true);
            filtro.setLocationRelativeTo(this);
            filtro.setVisible(true);
        }       
    }//GEN-LAST:event_filterAppointmentsButtonActionPerformed
    
    // Método para reiniciar las citas de la tabla mediante un botón.
    private void resetTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTableButtonActionPerformed
            // Se pregunta al usuario si desea reiniciar la tabla.
             int result = JOptionPane.showConfirmDialog(this, "¿Desea reiniciar la tabla de citas?",
                "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
             // Si la respuesta es afirmativa entonces se cierra la ventana y se abre una nueva.
             if (result == JOptionPane.YES_OPTION){
                dispose();
                CitasBS citasMenu = new CitasBS();
                citasMenu.setVisible(true);
             }
    }//GEN-LAST:event_resetTableButtonActionPerformed

    // Método para enviar un correo de confirmación a las citas de mañana que se encuentren pendientes
    // mediante un botón.
    private void sendMailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMailsButtonActionPerformed
        if (control.verCitasPendientesCorreo().isEmpty() == true)
                JOptionPane.showMessageDialog(null, "No existen citas disponibles para mañana que se les pueda enviar un correo.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);
        else{
            dispose();
            EnviarCorreos mailSender = new EnviarCorreos();
            mailSender.setVisible(true);
        }
    }//GEN-LAST:event_sendMailsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CitasBS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CitasBS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CitasBS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CitasBS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CitasBS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAppointmentButton;
    private javax.swing.JTable appointmentsTable;
    private javax.swing.JButton confirmAppointmentButton;
    private javax.swing.JButton filterAppointmentsButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifyAppointmentButton;
    private javax.swing.JButton removeAppointmentButton;
    private javax.swing.JButton resetTableButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton sendMailsButton;
    // End of variables declaration//GEN-END:variables
}
