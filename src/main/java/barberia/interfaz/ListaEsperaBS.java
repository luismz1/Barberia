package barberia.interfaz;

// Paquetes utilizados
import barberia.control.Control;
import java.util.ArrayList;
import javax.swing.JOptionPane;

// ListaEsperaBS: Clase que se encarga de la ventana para el funcionamiento del menú de lista de espera.
public class ListaEsperaBS extends javax.swing.JFrame {
    // Variables utilizadas
    private Control control;
    private ArrayList<String> clientesEspera;
    /**
     * Creates new form ListaEsperaBS
     */
    
    // Constructor
    public ListaEsperaBS() {
        control = Control.getInstance();
        clientesEspera = control.verListaDeEspera();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaEsperaList = new javax.swing.JList(clientesEspera.toArray(new String[clientesEspera.size()]));
        addClienteButton = new javax.swing.JButton();
        deleteClienteButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menú Espera");
        setResizable(false);

        listaEsperaList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(listaEsperaList);

        addClienteButton.setText("Agregar Cliente");
        addClienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClienteButtonActionPerformed(evt);
            }
        });

        deleteClienteButton.setText("Eliminar Cliente");
        deleteClienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteClienteButtonActionPerformed(evt);
            }
        });

        returnButton.setBackground(new java.awt.Color(32, 31, 31));
        returnButton.setForeground(new java.awt.Color(255, 255, 255));
        returnButton.setText("Regresar al menú");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteClienteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addClienteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(addClienteButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteClienteButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(returnButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Método para borrar un cliente de lista de espera mediante un botón.
    private void deleteClienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteClienteButtonActionPerformed
        // Se intenta seleccionar un cliente.
        try{
            // Se obtiene el identificador del cliente.
            String identificadorMail = listaEsperaList.getSelectedValue();
            identificadorMail = identificadorMail.substring(19, identificadorMail.indexOf("\'", 19));
            // Se pregunta al usuario si desea eliminar el cliente de lista de espera.
            int result = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar el cliente solicitado de la lista de espera?",
               "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            // En caso de que la respuesta sea afirmativa, se borra el cliente de lista de espera y se guardan los datos.
            if (result == JOptionPane.YES_OPTION){
                 control.eliminarClienteEspera(identificadorMail);
                 Control.guardarDatos(control);
                 JOptionPane.showMessageDialog(this, "Se ha eliminado el cliente solicitado de la lista de espera exitosamente.", 
                         "Notificación", JOptionPane.INFORMATION_MESSAGE);
                 // Se cierra la ventana actual y se regresa al menú de lista de espera.
                 dispose();
                 ListaEsperaBS listaEsperaMenu = new ListaEsperaBS();
                 listaEsperaMenu.setVisible(true);
            }
        //  Si el usuario no ha seleccionado un cliente, entonces se le dice que por favor selecione un cliente    
        }catch(NullPointerException ne){
            JOptionPane.showMessageDialog(this, "Seleccione el cliente que desea eliminar de la lista de espera.",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
        // Cualquiera otro error, será atrapado en este bloque de código.
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Ha ocurrido algún error, intente de nuevo más tarde. .",
                    "Advertencia", JOptionPane.ERROR_MESSAGE);
        }    
    }//GEN-LAST:event_deleteClienteButtonActionPerformed

    private void addClienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClienteButtonActionPerformed
        if (control.verClientes().isEmpty()){
                JOptionPane.showMessageDialog(this, "No existen clientes disponibles para agregar a lista de espera.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);                  
        }else{       
            dispose();
            AgregarEspera esperaAdd = new AgregarEspera();
            esperaAdd.setVisible(true);
        }
    }//GEN-LAST:event_addClienteButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
       // Se pregunta al usuario si desea volver al menú principal.
        int result = JOptionPane.showConfirmDialog(this, "¿Desea volver al menú principal?",
               "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
       // Si la respuesta es afirmativa entonces se cierra la ventana actual y se abre la ventana de menú principal.
        if (result == JOptionPane.YES_OPTION){
           dispose();
           Barberia barberia = new Barberia();
           barberia.setVisible(true);
       }
    }//GEN-LAST:event_returnButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaEsperaBS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaEsperaBS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaEsperaBS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaEsperaBS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListaEsperaBS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addClienteButton;
    private javax.swing.JButton deleteClienteButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaEsperaList;
    private javax.swing.JButton returnButton;
    // End of variables declaration//GEN-END:variables
}
