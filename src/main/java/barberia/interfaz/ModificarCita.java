package barberia.interfaz;

// Paquetes utilizados
import barberia.control.Control;
import barberia.control.DataVerification;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;

// ModificarCita: Clase que se encarga de la ventana para agregar o modificar los atributos de una cita.
public class ModificarCita extends javax.swing.JFrame {
    // Variables utilizadas
    private Control control;
    private boolean includesData;
    private int identificador;
    private ArrayList<String> emails;
    private ArrayList<String> servicios;
    /**
     * Creates new form ModificarCita
     */
    
    // Constructor #1
    public ModificarCita() {
        control = Control.getInstance();
        includesData = false;
        emails = control.verEmails();
        servicios = control.verServiciosDescripciones();
        initComponents();
    }
    
    // Constructor #2
    public ModificarCita(String id, String email, String descripcion, String fechaCita, String horaCita){
        LocalDate input = LocalDate.parse(fechaCita);
        Date fecha = Date.from(input.atStartOfDay(ZoneId.systemDefault()).toInstant());
        identificador = Integer.parseInt(id);
        control = Control.getInstance();
        includesData = true;
        emails = control.verEmails();
        servicios = control.verServiciosDescripciones();
        initComponents();
        emailsComboBox.setSelectedItem(email);
        servicesComboBox.setSelectedItem(descripcion);
        horaSpinner.setValue(horaCita);
        DateChooser.setDate(fecha);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        emailsComboBox = new javax.swing.JComboBox<>();
        DateChooser = new com.toedter.calendar.JDateChooser();
        servicesComboBox = new javax.swing.JComboBox<>();
        acceptButton = new javax.swing.JButton();
        horaSpinner = new javax.swing.JSpinner();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ventana Cita");
        setResizable(false);

        jLabel1.setText("Email de Cliente");

        jLabel2.setText("Servicio solicitado");

        jLabel3.setText("Hora solicitada");

        jLabel4.setText("Fecha solicitada");

        String[] arrayEmails = emails.toArray(new String[emails.size()]);
        emailsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(arrayEmails));

        String[] arrayServicios = servicios.toArray(new String[servicios.size()]);
        servicesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(arrayServicios));

        acceptButton.setText("Aceptar");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        horaSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"00:00 am", "01:00 am", "02:00 am", "03:00 am", "04:00 am", "05:00 am", "06:00 am", "07:00 am", "08:00 am", "09:00 am", "10:00 am", "11:00 am", "12:00 pm", "13:00 pm", "14:00 pm", "15:00 pm", "16:00 pm", "17:00 pm", "18:00 pm", "19:00 pm", "20:00 pm", "21:00 pm", "22:00 pm", "23:00 pm"}));

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addComponent(acceptButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(emailsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(servicesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(horaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(cancelButton)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(emailsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(servicesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(horaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(acceptButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //  Método para aceptar los cambios modificados en una cita mediante un botón.
    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        // Se crea una variable para inicializar el menú de citas.
        CitasBS citasMenu;        
        // Se obtiene la hora.
        String hora = horaSpinner.getValue().toString();
        int horaCita = Integer.parseInt(hora.substring(0, 2));
        // Se intenta realizar todos los procedimientos, lo primero que se revisa es la fecha.
        try{
            // Se obtiene la fecha.
            Date input = DateChooser.getCalendar().getTime();
            LocalDate date = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            int dia = date.getDayOfWeek().getValue() - 1;
            // Se revisa que la fecha no haya pasado.
            if (date.isBefore(LocalDate.now()))
                JOptionPane.showMessageDialog(this, "No puede agendar una cita en una fecha que ya ha transcurrido.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);
            // Se revisa que el día de la fecha sea un día que se pueda trabajar según el horario.
            else if (control.diaTrabajable(dia, horaCita) == false)
                JOptionPane.showMessageDialog(this, "La hora solicitada no se encuentra disponible en el horario del día "+
                        DataVerification.IntToStringDay(dia) + ".",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);
            // Si las restricciones anteriores se cumplen, entonces se revisarán otras.
            else{
                // Si no se incluye información, entonces se tiene que agregar la cita.
                if (includesData == false){
                    // Revisar que la fecha y la hora no esten relacionadas con una cita ya existente.
                     if (control.citaExiste(date, horaCita) != -1){
                        JOptionPane.showMessageDialog(this, "La fecha y la hora registradas ya estan asociadas a una cita.",
                                "Advertencia", JOptionPane.WARNING_MESSAGE);
                     // En caso de que la cita no tengo una fecha y una hora relacionada en el sistema, entonces se crea la cita y se almacena.
                     }else{
                        control.agregarCita(emailsComboBox.getSelectedItem().toString(), servicesComboBox.getSelectedItem().toString(),
                                date, horaCita);
                        Control.guardarDatos(control);
                        JOptionPane.showMessageDialog(this, "Se ha creado la cita exitosamente.",
                                "Notificación", JOptionPane.INFORMATION_MESSAGE);
                        // Se cierra la ventana actual y se abre nuevamente el menú de citas.
                        dispose();
                        citasMenu = new CitasBS();
                        citasMenu.setVisible(true);
                     }
                // Si se incluye la información, entonces se tiene que modificar la cita.
                }else{
                    // Revisar que la fecha y la hora no esten relacionadas con una cita ya existente distinta a la cita que se modifica.
                     if (control.citaExiste(date, horaCita) != identificador && control.citaExiste(date, horaCita) != -1){
                        JOptionPane.showMessageDialog(this, "La fecha y la hora registradas ya estan asociadas a una cita.",
                                "Advertencia", JOptionPane.WARNING_MESSAGE);
                    // En caso de que la cita no tengo una fecha y una hora relacionada en el sistema o corresponda a la misma cita,
                    // entonces se modifica la cita y se almacena.    
                     }else{
                        control.modificarCita(identificador, emailsComboBox.getSelectedItem().toString(), servicesComboBox.getSelectedItem().toString(),
                                date, horaCita);
                        Control.guardarDatos(control);
                        JOptionPane.showMessageDialog(this, "Se ha modificado la cita exitosamente.",
                                "Notificación", JOptionPane.INFORMATION_MESSAGE);
                        // Se cierra la ventana actual y se abre nuevamente el menú de citas.
                        dispose();
                        citasMenu = new CitasBS();
                        citasMenu.setVisible(true);
                     }
                }
            }
        // Revisar que la fecha sea válida.          
        } catch(NullPointerException ne){
         JOptionPane.showMessageDialog(this, "Verifique que la fecha ingresada se encuentre en el formato adecuado.",
                 "Advertencia", JOptionPane.WARNING_MESSAGE);                
        // Cualquiera otro error, será atrapado en este bloque de código.
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Ha ocurrido algún error, intente de nuevo más tarde. .",
                    "Advertencia", JOptionPane.ERROR_MESSAGE);
        }    
    }//GEN-LAST:event_acceptButtonActionPerformed
    
     // Método para cancelar los cambios y regresar al menú de citas mediante un botón.
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
       // Se pregunta al usuario si desea volver al menú de citas.
        int result = JOptionPane.showConfirmDialog(this, "¿Desea volver al menú de citas?",
               "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
       // Si la respuesta es afirmativa entonces se cierra la ventana actual y se abre la ventana del menu de citas.
       if (result == JOptionPane.YES_OPTION){
           dispose();
           CitasBS citasMenu = new CitasBS();
           citasMenu.setVisible(true);
       }
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModificarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModificarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModificarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModificarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificarCita().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DateChooser;
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> emailsComboBox;
    private javax.swing.JSpinner horaSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JComboBox<String> servicesComboBox;
    // End of variables declaration//GEN-END:variables
}
