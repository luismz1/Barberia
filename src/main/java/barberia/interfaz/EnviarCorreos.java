package barberia.interfaz;

// Paquetes utilizados
import barberia.control.Control;
import java.util.ArrayList;
import javax.swing.JOptionPane;

// EnviarCorreos: Clase que se encarga de la ventana para enviar correos.
public class EnviarCorreos extends javax.swing.JFrame {
    // Variables utilizadas
    private Control control;
    private ArrayList<String> infoCitasPendientes;
    /**
     * Creates new form EnviarCorreos
     */
    
    // Constructor
    public EnviarCorreos() {
        control = Control.getInstance();
        infoCitasPendientes = control.verCitasPendientesCorreo();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pendingAppointmentsList = new javax.swing.JList(infoCitasPendientes.toArray(new String[infoCitasPendientes.size()]));
        sendMailsButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ventana Correos");
        setResizable(false);

        jScrollPane1.setViewportView(pendingAppointmentsList);

        sendMailsButton.setText("Enviar Correos");
        sendMailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMailsButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Shilft + flechas: Seleccionar varios correos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(sendMailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(sendMailsButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Método para enviar correos mediante un botón.
    private void sendMailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMailsButtonActionPerformed
        // Variable en donde se guarda si el proceso de enviar correos fue exitoso.
        boolean successfulProcess;
        // Se intenta seleccionar una cita.
        try{
            // Se obtiene un Array List con la información de las citas elegidas por el usuario.
            ArrayList<String> citasEscogidas = (ArrayList<String>) pendingAppointmentsList.getSelectedValuesList();
            // Las citas seleccionadas se procesan y se envia un correo de confirmación a cada uno de ellas.
            JOptionPane panel = new JOptionPane();
            successfulProcess = control.prepararCorreos(citasEscogidas);
            // En caso de que el proceso haya sido exitoso, se muestra en pantalla un mensaje confirmando que el
            // proceso se ha dado de manera exitosa.
            if (successfulProcess == true){
                    JOptionPane.showMessageDialog(this, "Se han enviado los correos exitosamente.",
                            "Notifación", JOptionPane.INFORMATION_MESSAGE);
            // En caso contrario, se muestra en pantalla un mensaje dando como advertencia ha ocurrido algún error.
            }else{
                    JOptionPane.showMessageDialog(this, "Ha habido algún problema al enviar los correos.",
                            "Advertencia", JOptionPane.WARNING_MESSAGE);     
            }
            // Se cierra la ventana actual y se regresa al menú de citas.
            dispose();
            CitasBS citasMenu = new CitasBS();
            citasMenu.setVisible(true);
        //  Si el usuario no ha seleccionado una cita, entonces se le dice que por favor selecione una cita.  
        }catch(NullPointerException | ClassCastException e){
            JOptionPane.showMessageDialog(this, "Seleccione las citas que desea enviar un correo.",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
        // Cualquiera otro error, será atrapado en este bloque de código.
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Ha ocurrido algún error, intente de nuevo más tarde. .",
                    "Advertencia", JOptionPane.ERROR_MESSAGE);
        }          
    }//GEN-LAST:event_sendMailsButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
       // Se pregunta al usuario si desea volver al menú de citas.
        int result = JOptionPane.showConfirmDialog(this, "¿Desea volver al menú de citas?",
               "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        // En caso de que la respuesta sea afirmativa entonces se cierra la ventana actual y se abre el menú de citas..
        if (result == JOptionPane.YES_OPTION){
           dispose();
           CitasBS citasMenu = new CitasBS();
           citasMenu.setVisible(true);
       }
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnviarCorreos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnviarCorreos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnviarCorreos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnviarCorreos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EnviarCorreos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> pendingAppointmentsList;
    private javax.swing.JButton sendMailsButton;
    // End of variables declaration//GEN-END:variables
}
