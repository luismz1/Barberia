package barberia.interfaz;

// Paquetes utilizados
import barberia.control.Control;
import java.util.ArrayList;
import javax.swing.JOptionPane;

// AgregarEspera: Clase que se encarga de la ventana para agregar un cliente a la lista de espera.
public class AgregarEspera extends javax.swing.JFrame {
    // Variables utilizadas
    private Control control;
    private ArrayList<String> infoClientes;
    /**
     * Creates new form agregarClienteEspera
     */
    
    // Constructor
    public AgregarEspera() {
        control = Control.getInstance();
        infoClientes = control.verClientes();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        clientesList = new javax.swing.JList(infoClientes.toArray(new String[infoClientes.size()]));
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ventana Espera");
        setResizable(false);

        clientesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(clientesList);

        acceptButton.setText("Aceptar");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(cancelButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Método para agregar un cliente mediante un botón a la lista de espera.
    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        // Se intenta seleccionar un cliente.
        try{
            // Se obtiene el identificador del cliente.
            String identificadorMail = clientesList.getSelectedValue();
            identificadorMail = identificadorMail.substring(19, identificadorMail.indexOf("\'", 19));
            // Se pregunta al usuario si desea agregar el cliente.
            int result = JOptionPane.showConfirmDialog(this, "¿Está seguro de agregar el cliente solicitado a la lista de espera?",
               "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            // En caso de que la respuesta sea afirmativa entonces se agrega el cliente en caso
            // de que este no se encuentre en la lista de espera y se notifica al usuario.
            if (result == JOptionPane.YES_OPTION){
                if (control.clienteEspera(identificadorMail) == true){
                 JOptionPane.showMessageDialog(this, "Este cliente ya se encuentra registrado en lista de espera, intente con otro.", 
                         "Advertencia", JOptionPane.WARNING_MESSAGE);
                }else{
                    control.agregarClienteEspera(identificadorMail);
                    Control.guardarDatos(control);
                    JOptionPane.showMessageDialog(this, "Se ha agregado el cliente solicitado de la lista de espera exitosamente.", 
                            "Notificación", JOptionPane.INFORMATION_MESSAGE);
                    dispose();
                    ListaEsperaBS listaEsperaMenu = new ListaEsperaBS();
                    listaEsperaMenu.setVisible(true);
                   }
            }
        //  Si el usuario no ha seleccionado un cliente, entonces se le dice que por favor selecione un cliente.
        }catch(NullPointerException ne){
            JOptionPane.showMessageDialog(this, "Seleccione el cliente que desea agregar a la lista de espera.",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
        // Cualquiera otro error, será atrapado en este bloque de código.
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Ha ocurrido algún error, intente de nuevo más tarde. .",
                    "Advertencia", JOptionPane.ERROR_MESSAGE);
        }            
    }//GEN-LAST:event_acceptButtonActionPerformed
    
    // Método para regresar al menú de lista de espera mediante un botónñ
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
       // Se pregunta al usuario si desea volver al menú de lista de espera.
        int result = JOptionPane.showConfirmDialog(this, "¿Desea volver al menú de lista de espera?",
               "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
       // En caso de que la respuesta sea afirmativa entonces se cierra la ventana actual y se abre el menú de lista de espera.
       if (result == JOptionPane.YES_OPTION){
            dispose();
            ListaEsperaBS listaEsperaMenu = new ListaEsperaBS();
            listaEsperaMenu.setVisible(true);
       }
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarEspera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarEspera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarEspera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarEspera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgregarEspera().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList<String> clientesList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
