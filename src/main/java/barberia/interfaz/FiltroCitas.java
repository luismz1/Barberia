
package barberia.interfaz;

// Paquetes utilizados
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.JOptionPane;

// FiltroCitas: Clase que se encarga de la ventana para filtrar las citas según una fecha.
public class FiltroCitas extends javax.swing.JDialog {
    // Variables utilizadas
    private CitasBS citasMenu;
    /**
     * Creates new form FiltroCitasB
     */
    
    // Constructor
    public FiltroCitas(java.awt.Frame parent, CitasBS citasMenu, boolean modal) {
        super(parent, modal);
        this.citasMenu = citasMenu;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterByWeekButton = new javax.swing.JButton();
        filterByMonthButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        DateChooser = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ventana Filtro");
        setResizable(false);

        filterByWeekButton.setText("Filtrar por semana");
        filterByWeekButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByWeekButtonActionPerformed(evt);
            }
        });

        filterByMonthButton.setText("Filtrar por mes");
        filterByMonthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByMonthButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Fecha");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(filterByWeekButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filterByMonthButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterByWeekButton)
                    .addComponent(filterByMonthButton))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Método para filtrar las citas por semana.
    private void filterByWeekButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByWeekButtonActionPerformed
        // Se intenta obtener la fecha.
        try{
            // Se obtiene la fecha.
            Date input = DateChooser.getCalendar().getTime();
            LocalDate date = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            JOptionPane.showMessageDialog(this, "Se han filtrado las citas por semana.",
                    "Notificación", JOptionPane.INFORMATION_MESSAGE);
            // Se cierra el menú de citas y también esta ventana.
            citasMenu.dispose();
            this.dispose();
            // Se abre el menú de citas con el constructor que recibo un cero como parámetro indicando que se encuentra
            // en el filtro por semanas y comienza a buscar a partir de la fecha seleccionada.
            citasMenu = new CitasBS(0, date);
            citasMenu.setVisible(true);
        // En caso de que la fecha no sea válida, se advierte al usuario.   
        } catch(NullPointerException ne){
         JOptionPane.showMessageDialog(this, "Verifique que la fecha ingresada se encuentre en el formato adecuado.",
                 "Advertencia", JOptionPane.WARNING_MESSAGE);
        // Cualquiera otro error, será atrapado en este bloque de código.
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Ha ocurrido algún error, intente de nuevo más tarde. .",
                    "Advertencia", JOptionPane.ERROR_MESSAGE);
        }    
    }//GEN-LAST:event_filterByWeekButtonActionPerformed

    private void filterByMonthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByMonthButtonActionPerformed
        // Se intenta obtener la fecha.                                       
        try{
             // Se obtiene la fecha.
            Date input = DateChooser.getCalendar().getTime();
            LocalDate date = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            JOptionPane.showMessageDialog(this, "Se han filtrado las citas por mes.",
                    "Notificación", JOptionPane.INFORMATION_MESSAGE);
            // Se cierra el menú de citas y también esta ventana.
            citasMenu.dispose();
            this.dispose();
            // Se abre el menú de citas con el constructor que recibo un uno como parámetro indicando que se encuentra
            // en el filtro por meses y comienza a buscar a partir de la fecha seleccionada.
            citasMenu = new CitasBS(1, date);
            citasMenu.setVisible(true);
         // En caso de que la fecha no sea válida, se advierte al usuario.    
        } catch(NullPointerException ne){
         JOptionPane.showMessageDialog(this, "Verifique que la fecha ingresada se encuentre en el formato adecuado.",
                 "Advertencia", JOptionPane.WARNING_MESSAGE);                
        // Cualquiera otro error, será atrapado en este bloque de código.
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Ha ocurrido algún error, intente de nuevo más tarde. .",
                    "Advertencia", JOptionPane.ERROR_MESSAGE);
        }    
    }//GEN-LAST:event_filterByMonthButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DateChooser;
    private javax.swing.JButton filterByMonthButton;
    private javax.swing.JButton filterByWeekButton;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
